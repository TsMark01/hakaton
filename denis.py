from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from telebot.util import escape
from schema import *

def unescape(text: str) -> str: return text.replace("&lt;", "<").replace("&gt;", ">").replace("&amp;", "&")

from bot import bot
from db import db
import keyboard

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ —á–ª–µ–Ω–æ–≤ —Å–µ–º–µ–π - dict[<Id —Å–µ–º—å–∏>, dist[<–ò–º—è —á–ª–µ–Ω–∞ —Å–µ–º—å–∏>, <–ò–Ω—Ñ–æ –ß–ª–µ–Ω–∞ —Å–µ–º—å–∏>]]
tempMembersList: dict[int, dict[str, MemberData]] = {}

@bot.callback_query_handler(func=lambda c: c.data == "family")
def familyMenu(call: CallbackQuery):
    bot.edit_message_text("–ü–µ—Ä–µ–≤–æ–∂—É –≤ –º–µ–Ω—é...", call.message.chat.id, call.message.id, reply_markup=keyboard.main_menu)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º—å–∏
@bot.callback_query_handler(func=lambda c: c.data == "family:edit")
def familyEditMenu(call: CallbackQuery):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —á–ª–µ–Ω–∞ —Å–µ–º—å–∏ ‚ûï", callback_data="family:member:create"),
        InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ üë®‚Äçüë®‚Äçüë¶‚Äçüë¶", callback_data="family:member:list"),
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="family"),
        row_width=1)

    bot.edit_message_text("–†–µ–¥–∞–∫—Ç–æ—Ä —Å–µ–º—å–∏", call.message.chat.id, call.message.id, reply_markup=markup)  # TODO


# –ò–Ω–∏—Ü–∏–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
@bot.callback_query_handler(func=lambda c: c.data == ("family:member:list"))
def familyMembersList(call: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
    l = db.get_family_members_by_telegram_id(call.from_user.id)
    # –û—á–∏—â–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ Id —Å–µ–º—å–∏
    tempMembersList[call.from_user.id] = {}
    for i in l: tempMembersList[call.from_user.id][i.name] = i

    familyMembersListMenu(call)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏


# –°–ø–∏—Å–æ–∫ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º r"family:member:list>(\d++)"
@bot.callback_query_handler(func=lambda c: c.data.startswith("family:member:list>"))
def familyMembersListMenu(call: CallbackQuery):
    try:
        page = int(call.data.split(">")[1])  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    except:
        page = 0

    if not call.from_user.id in tempMembersList:
        return familyEditMenu(call)  # except: –ï—Å–ª–∏ —Å–ø–∏—Å–∫–∞ –Ω–µ–±—ã–ª–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
    members = tuple(tempMembersList[call.from_user.id].values())  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∑–Ω–∞—á–µ–Ω–∏—è
    display = members[page * 6:page * 6 + 6]  # –ë–µ—Ä—ë–º 6 –∑–∞–ø–∏—Å–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º

    markup = InlineKeyboardMarkup()
    markup.add(
        *[InlineKeyboardButton(d.name, callback_data=f"family:member:edit>{escape(d.name)}") for d in display],
        row_width=2)
    markup.add(
        (InlineKeyboardButton("ü†î –ù–∞–∑–∞–¥", callback_data=f"family:member:list>{page - 1}")
         if page > 0 else InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="family:edit")),
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1-—è, –≤–æ–∑–≤—Ä–∞—â—è–µ–º –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É —Å–µ–º—å–∏
        row_width=1)
    if (len(members) > 6):  # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        markup.add(
            (InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚ûù", callback_data=f"family:member:list>{page + 1}")
             if page * 6 + 5 < len(members) else InlineKeyboardButton("¬´ –í –Ω–∞—á–∞–ª–æ",
                                                                      callback_data="family:member:list>0")),
            # –ö–Ω–æ–ø–∫–∞ '–í –Ω–∞—á–∞–ª–æ' –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è
            row_width=2)

    bot.edit_message_text(f"–°–ø–∏—Å–æ–∫ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{(len(members) + 5) // 6}", call.message.chat.id,
                          call.message.id, reply_markup=markup)  # TODO


# –†–µ–¥–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏ r"family:member:list>(\w++)"
@bot.callback_query_handler(func=lambda c: c.data.startswith("family:member:edit>"))
def familyMemberEditMenu(call: CallbackQuery):
    member: MemberData = db.get_family_member_by_name(call.from_user.id, unescape(call.data.split(">")[1]))

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å ‚ùå", callback_data=f"family:member:delete>{escape(member.name)}"),
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="family:member:list"),
        row_width=1)

    bot.edit_message_text(f"{member.name}\n{member.age} –ª–µ—Ç", call.message.chat.id, call.message.id,
                          reply_markup=markup)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏... –í–æ–ø—Ä–æ—Å –∏–º–µ–Ω–∏
@bot.callback_query_handler(func=lambda c: c.data == "family:member:create")
def familyMemberCreate(call: CallbackQuery):
    message = bot.edit_message_text("–í–µ–¥–∏—Ç–µ –∏–º—è", call.message.chat.id, call.message.id,
                                    reply_markup=InlineKeyboardMarkup())
    # –ü–µ—Ä–µ–¥–∞—ë–º –≤ callback –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.register_next_step_handler(message, lambda m: memberCreateAcceptName(m, message))


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏... –í–æ–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—Å—Ç–∞
def memberCreateAcceptName(message: Message, prevMessage: Message):
    # message - —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # prevMessage - –ø–æ–ª—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞

    name = message.text
    bot.delete_message(message.chat.id, message.id)
    bot.edit_message_text(f"–ö–∞–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—Å—Ç <b>{escape(name)}</b>", prevMessage.chat.id, prevMessage.id,
                          parse_mode="html")
    # –ü–µ—Ä–µ–¥–∞—ë–º –≤ callback –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏ –∏–º—è
    bot.register_next_step_handler(prevMessage, lambda m: memberCreateAcceptAge(m, prevMessage, name))


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏... –í–æ–ø—Ä–æ—Å —Ä–æ–ª–∏
def memberCreateAcceptAge(message: Message, prevMessage: Message, name: str):
    # message - —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # prevMessage - –ø–æ–ª—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞

    bot.delete_message(message.chat.id, message.id)
    try:
        age = int(message.text)
    except:  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Å–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Å—Ç (–Ω–µ —á–∏—Å–ª–æ), –ø–µ—Ä–µ—Å–ø—Ä–æ—Å
        message = bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –≤–æ–∑—Ä–∞—Å—Ç\n–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Å—Ç –∑–∞–Ω–æ–≤–æ", prevMessage.chat.id,
                                        prevMessage.id)
        bot.register_next_step_handler(message, lambda m: memberCreateAcceptAge(m, prevMessage, name))
        return

    if age < 0:  # –ï—Å–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–µ—Ä–µ—Å–ø—Ä–æ—Å
        message = bot.edit_message_text("–°–ø—É—Å—Ç–∏—Å—å –Ω–∞ –∑–µ–º–ª—é\n–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Å—Ç –∑–∞–Ω–æ–≤–æ", prevMessage.chat.id,
                                        prevMessage.id)
        bot.register_next_step_handler(message, lambda m: memberCreateAcceptAge(m, prevMessage, name))
        return

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–†–æ–¥–∏—Ç–µ–ª—å üë®", callback_data=f"family:member:create:data>{escape(name)}>{age}>parent"),
        InlineKeyboardButton("üë∂ –†–µ–±—ë–Ω–æ–∫", callback_data=f"family:member:create:data>{escape(name)}>{age}>child"),
        row_width=2)
    message = bot.edit_message_text(f"–ö–∞–∫–æ–≤–∞ —Ä–æ–ª—å <b>{escape(name)}</b> –≤ —Å–µ–º—å–µ", prevMessage.chat.id, prevMessage.id,
                                    parse_mode="html", reply_markup=markup)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏ r"family:member:create:data>(?<name>\w++)>(?<age>\d++)>(?<role>\w++)"
@bot.callback_query_handler(func=lambda c: c.data.startswith("family:member:create:data>"))
def memberCreateAcceptRole(call: CallbackQuery):
    try:
        # –ò–∑ callback-–∞ –±–µ—Ä—ë–º –¥–∞—Ç—É
        data = call.data.split(">")
        member = MemberData(unescape(data[1]), int(data[2]), data[3] == "parent")
    except:
        # –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ—Ç–∞–∫? - –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–µ–º—å–∏
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="family:edit"), row_width=1)
        bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ü§∑‚Äç‚ôÇÔ∏è", reply_markup=markup)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º
    db.add_family_member(call.from_user.id, member.name, member.age, member.role)

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("¬´ –ö —Å–µ–º—å–µ", callback_data="family:edit"), row_width=1)
    bot.edit_message_text(f"<b>{member.name}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–º—å—é", call.message.chat.id, call.message.id,
                          parse_mode="html", reply_markup=markup)


# –£–¥–∞–ª–µ–Ω–∏–µ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏ r"family:member:create:data>(?<name>\w++)"
@bot.callback_query_handler(func=lambda c: c.data.startswith("family:member:delete>"))
def familyMemberDelete(call: CallbackQuery):
    member: str = unescape(call.data.split(">")[1])
    db.delete_family_member_by_name(call.from_user.id, member)
    del tempMembersList[call.from_user.id][member]

    return familyEditMenu(call, call.from_user)