import random
from telebot import TeleBot, types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import TOKEN
from info import *
from keyboard import *
from db import db

bot : TeleBot = TeleBot(TOKEN)#TOKEN)

from denis import *

######################################################MainFunctions#########################################################


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    bot.send_message(
        chat_id,
        f"""–ü—Ä–∏–≤–µ—Ç {user_name}! üñê

–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é ü§î

–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é.

–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥–∞ –∏ –¥–∞—Ç—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, —Ç–∞–∫–∏–µ –∫–∞–∫:
- –ü–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—É–≥–æ–≤
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
–ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ ü§Ø
–¢—ã –≥–æ—Ç–æ–≤?
–ï—Å–ª–∏ –¥–∞, —Å–∫–æ—Ä–µ–µ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é¬ª –∏ –¥–µ–ª–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üëá""", reply_markup=main_menu)


@bot.message_handler(commands=['instruction'])
def send_instruction(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–æ—Ç–∞ üßë‚Äçüíªüì±
üìÉ–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:
‚ñé–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <u>/start</u>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—é.
‚ñé–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <u>/menu</u>, —á—Ç–æ-–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é.

üÜó–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—É–≥–∞:
‚ñé–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <u>/start</u>.
‚ñé–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.
‚ñé–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.

üë®‚Äçüëß‚Äçüëß–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
‚ñé–í–≤–µ–¥–∏—Ç–µ <u>/menu</u>.
‚ñé–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É —Å–µ–º—å—è.
‚ñé–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
‚ñé–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
‚ñé–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –¥–∞–ª–µ–µ.""", parse_mode="html", reply_markup=main_menu)

############################################################################################################################

@bot.callback_query_handler(func=lambda c:c.data == "instruction")
def send_instruction_callback(call: CallbackQuery):
    bot.edit_message_text("""–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–æ—Ç–∞ üßë‚Äçüíªüì±
üìÉ–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:
‚ñé–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <u>/start</u>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—é.
‚ñé–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <u>/menu</u>, —á—Ç–æ-–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é.

üÜó–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—É–≥–∞:
‚ñé–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <u>/start</u>.
‚ñé–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.
‚ñé–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.

üë®‚Äçüëß‚Äçüëß–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
‚ñé–í–≤–µ–¥–∏—Ç–µ <u>/menu</u>.
‚ñé–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É —Å–µ–º—å—è.
‚ñé–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
‚ñé–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
‚ñé–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –¥–∞–ª–µ–µ.""", call.message.chat.id, call.message.id, parse_mode="html", reply_markup=main_menu)

######################################################MenuFunctions#########################################################

@bot.message_handler(commands=['menu'])
def menu(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü–µ—Ä–µ–≤–æ–∂—É –≤ –º–µ–Ω—é...", reply_markup=main_menu)

@bot.callback_query_handler(func=lambda c: c.data == ("menu"))
def menu_callback(call: CallbackQuery):
    bot.edit_message_text("–ü–µ—Ä–µ–≤–æ–∂—É –≤ –º–µ–Ω—é...", call.message.chat.id, call.message.id, reply_markup=main_menu)


######################################################1#########################################################

@bot.callback_query_handler(func=lambda c: c.data == ("main_leisure"))
def main_leisure_menu(call: CallbackQuery):
    bot.edit_message_text("–ì–¥–µ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—É–≥?", call.message.chat.id, call.message.id, reply_markup=main_leisure)


######################################################AT_HOME#########################################################

@bot.callback_query_handler(func=lambda c: c.data == ("at_home"))
def at_home_step(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_r = choose_random_activity(activities)
    bot.edit_message_text(message_r, call.message.chat.id, call.message.id, parse_mode='Markdown', reply_markup=markup_get_activity)


@bot.callback_query_handler(func=lambda c: c.data == ("one_more_activity"))
def one_more_activity(call: CallbackQuery):
    bot.register_next_step_handler(call.message, at_home_step)


######################################################NOT_AT_HOME#########################################################

@bot.callback_query_handler(func=lambda c: c.data == ("not_at_home"))
def not_at_home_step(call: CallbackQuery):
#    chat_id = call.message.chat.id
#    list_of_interests = db.get_true_values_for_user(chat_id)
#    if len(list_of_interests) == 0:
#        bot.send_message(chat_id, """Oops! üò± –í—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç–µ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n
#–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É, –∏ –º—ã –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º! üéâ""")
    markup = InlineKeyboardMarkup()
    markup.add(
        *[InlineKeyboardButton(i, callback_data=f"not_at_home>{escape(i)}") for i in location_data.keys()]
    )
    bot.edit_message_text("–ì–¥–µ-–±—ã –≤–∞–º –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è? ü§î", call.message.chat.id, call.message.id, reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("not_at_home>"))
def not_at_home_choose(call: CallbackQuery):
    bot.delete_message(call.message.chat.id, call.message.id)

    category_name = unescape(call.data.split(">")[1])
    category = random.choice(list(location_data[category_name].values()))
    messages :list[int] = []
    for m in category.values():
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=m[2]), row_width=1)
        messages.append(bot.send_photo(call.message.chat.id, m[0], m[1], parse_mode="html", reply_markup=markup).id)

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–ü–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ", callback_data=f"not_at_home_again>{escape(category_name)}>"+"+".join(map(str,messages))),
        InlineKeyboardButton("–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="menu"),
        row_width=2)
    bot.send_message(call.message.chat.id, "–•–æ—Ç–∏—Ç–µ —á—Ç–æ —Ç–æ –∏–∑ —ç—Ç–æ–≥–æ?", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("not_at_home_again>"))
def not_at_home_choose_agina(call: CallbackQuery):
    print(call)
    bot.delete_messages(call.message.chat.id, list(map(int,call.data.split(">")[2].split("+"))))

    not_at_home_choose(call)


@bot.callback_query_handler(func=lambda call: call.data in location_data.keys())
def handle_query(call):
    category = call.data
    genre_menu = create_genre_menu(category)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∂–∞–Ω—Ä–æ–≤
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=genre_menu)


@bot.callback_query_handler(func=lambda call: '_' in call.data)
def handle_genre(call: CallbackQuery):
    category, genre = call.data.split('_')

    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = call.message.chat.id

    telegram_username = call.message.from_user.first_name

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:
    kino = (category == 'kino')
    concert = (category == 'concert')
    exhibition = (category == 'exhibition')
    excursion = (category == 'excursion')
    theater = (category == 'theater')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_user(telegram_id, telegram_username, kino=kino, concert=concert,
                exhibition=exhibition, excursion=excursion, theater=theater)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö
    movies_info = create_movie_menu(category, genre)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö

    for movie in movies_info:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        bot.send_photo(
            call.message.chat.id,
            movie["photo"],
            caption=f"{movie['description']}\n[–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]({movie['link']})",
            parse_mode='Markdown'  # –î–ª—è Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É
        )

@bot.callback_query_handler(func=lambda c: c.data == "editprofil")
def editprofil_c(call: CallbackQuery):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", reply_markup=main_menu)


if __name__ == '__main__':
    bot.infinity_polling()